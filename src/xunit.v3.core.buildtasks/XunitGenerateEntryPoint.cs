using System;
using System.Collections.Generic;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Text;
using Microsoft.Build.Framework;
using MSBuildTask = Microsoft.Build.Utilities.Task;

namespace Xunit.v3.Core.BuildTasks;

public class XunitGenerateEntryPoint : MSBuildTask
{
	static readonly Dictionary<string, (string Template, string Extension, Func<string, string> ToTypeOf)> templatesByLanguage = new(StringComparer.OrdinalIgnoreCase)
	{
		["C#"] = (
			"""
			// <auto-generated> This file has been auto generated by xunit.v3.core. </auto-generated>

			[global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
			public class XunitAutoGeneratedEntryPoint
			{
			    public static int Main(string[] args)
			    {
			        if (global::System.Linq.Enumerable.Any(args, arg => arg == "--server" || arg == "--internal-msbuild-node"))
			            return global::Xunit.Runner.InProc.SystemConsole.TestingPlatform.TestPlatformTestFramework.RunAsync(args{{extensionTypes}}).GetAwaiter().GetResult();
			        else
			            return global::Xunit.Runner.InProc.SystemConsole.ConsoleRunner.Run(args).GetAwaiter().GetResult();
			    }
			}
			""",
			".cs",
			input => $"typeof({input})"
		),
		["F#"] = (
			"""
			// <auto-generated> This file has been auto generated by xunit.v3.core. </auto-generated>

			module XunitAutoGeneratedEntryPoint

			[<EntryPoint>]
			[<global.System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage>]
			let main args =
			    if Array.exists(fun arg -> arg = "--server" || arg = "--internal-msbuild-node") args then
			        global.Xunit.Runner.InProc.SystemConsole.TestingPlatform.TestPlatformTestFramework.RunAsync(args{{extensionTypes}}).GetAwaiter().GetResult()
			    else
			        global.Xunit.Runner.InProc.SystemConsole.ConsoleRunner.Run(args).GetAwaiter().GetResult()
			""",
			".fs",
			input => $"typedefof<{input}>"
		),
		["VB"] = (
			"""
			' <auto-generated> This file has been auto generated by xunit.v3.core. </auto-generated>

			<Global.System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage>
			Public Class AutoGeneratedEntryPoint
			    Public Shared Function Main(args As String()) As Integer
			        If Global.System.Linq.Enumerable.Any(args, Function(arg) arg = "--server" OrElse arg = "--internal-msbuild-node") Then
			            Return Global.Xunit.Runner.InProc.SystemConsole.TestingPlatform.TestPlatformTestFramework.RunAsync(args{{extensionTypes}}).GetAwaiter().GetResult()
			        Else
			            Return Global.Xunit.Runner.InProc.SystemConsole.ConsoleRunner.Run(args).GetAwaiter().GetResult()
			        End If

			    End Function
			End Class
			""",
			".vb",
			input => $"GetType({input})"
		),
	};

#pragma warning disable CS8618  // These properties are set by MSBuild

	[Required]
	public ITaskItem GeneratedFileName { get; set; }

	[Required]
	public string Language { get; set; }

	[Required]
	public ITaskItem[] TestingPlatformBuilderHooks { get; set; }

#pragma warning restore CS8618

	public override bool Execute()
	{
		if (!templatesByLanguage.TryGetValue(Language, out var template))
		{
			Log.LogError("Unsupported language: {0}", Language);
			return false;
		}

		var extensionTypes = new StringBuilder();

		foreach (var builderHook in OrderBuilderHooks(TestingPlatformBuilderHooks))
			extensionTypes.AppendFormat(CultureInfo.InvariantCulture, ",{0}", template.ToTypeOf(builderHook.GetMetadata("TypeFullName")));

		var content = template.Template.Replace("{{extensionTypes}}", extensionTypes.ToString());
		File.WriteAllText(GeneratedFileName.ItemSpec, content);
		return true;
	}

	// Per the code in Microsoft.Testing.Platform.MSBuild, we want to ensure the TRX extension is
	// always last. We sort here since this is where we'll have access to the GUIDs. The
	// GroupBy/Select is used to eliminate duplicate task items.
	static IEnumerable<ITaskItem> OrderBuilderHooks(IEnumerable<ITaskItem> builderHooks)
	{
		var lastTaskItem = default(ITaskItem);

		foreach (var taskItem in builderHooks.GroupBy(x => x.ItemSpec).Select(x => x.First()))
			if (taskItem.ItemSpec.Equals("2006B3F7-93D2-4D9C-9C69-F41A1F21C9C7", StringComparison.OrdinalIgnoreCase))
				lastTaskItem = taskItem;
			else
				yield return taskItem;

		if (lastTaskItem is not null)
			yield return lastTaskItem;
	}
}
